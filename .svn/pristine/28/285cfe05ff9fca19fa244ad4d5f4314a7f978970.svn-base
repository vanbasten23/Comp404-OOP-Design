package xw32_wb7.server.model;

import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import provided.datapacket.ADataPacket;
import provided.datapacket.ADataPacketAlgoCmd;
import provided.datapacket.DataPacket;
import provided.datapacket.DataPacketAlgo;
import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;
import provided.util.IVoidLambda;
import xw32_wb7.chatroom.cmd.AddCmd;
import xw32_wb7.chatroom.model.IMember2ModelAdpt;
import xw32_wb7.chatroom.model.Member;
import xw32_wb7.client.model.IPerson2ModelAdpt;
import xw32_wb7.client.model.Person;
import xw32_wb7.game.controller.GameFac;
import xw32_wb7.game.msg.IAroundWorld;
import xw32_wb7.messagefactory.FailMsgFactory;
import xw32_wb7.util.ThreadPoolUtil;

import common.IAddCmd;
import common.IChatroom;
import common.ICmd2ModelAdapter;
import common.IFailMsg;
import common.IJoinRoomMsg;
import common.IMember;
import common.IPerson;
import common.IRequestCmd;
import common.ISuccessMsg;
import common.ITextMsg;

public class ServerModel {

	/**
	 * Person to model adapter
	 */
	
	private IPerson2ModelAdpt p2mAdpt;
	
	private IServerModel2ViewAdpt m2svAdpt;
	
	private IMember2ModelAdpt m2mAdpt;
	
	private Registry registry;
	
	private TeamManager tm;
	
	private String gameName = "Around the world in 80 days";
	
	/**
	 * Stub from local person
	 */
	private IPerson serverPersonStub;
	/**
	 * output command used to put multiple strings up onto the view.
	 */
	private IVoidLambda<String> outputCmd = new IVoidLambda<String>() {

		@Override
		public void apply(String... params) {
			for (String s : params) {
				m2svAdpt.append(s + "\n");
			}
		}
	};
	
	/**
	 * The default command is used to handle unknown host.
	 * Cause all known host will be handled via Id and by other commands.
	 */
	private DataPacketAlgo<ADataPacket, Void> algo;
	
	private List<IPerson> personList;
	/**
	 * Factory for the Registry and other uses.
	 */
	private IRMIUtils rmiUtils = new RMIUtils(outputCmd);
	
	/**
	 * Local member stub
	 */
	private IMember localMemberStub;
	
	private IAddCmd addCmd;
	
	public ServerModel(IServerModel2ViewAdpt adapter){
		m2svAdpt = adapter;
		
		personList = new ArrayList<IPerson>();
		
		tm = new TeamManager();
		
		m2mAdpt = new IMember2ModelAdpt(){
			@Override
			public ADataPacket handleMessage(ADataPacket msg) {
				return msg.execute(algo, null, null);
			}
			
		};
		
		/**
		 * Make add command, which is used to make a game MVC
		 */
		
		addCmd = new AddCmd(IAroundWorld.class);
		
		
	}
	public void start(){
		
		rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
		//local person as the rmi client
		try {
			m2svAdpt.setRemoteHost(rmiUtils.getLocalAddress()); //Is this stored somewhere?
			
			p2mAdpt = new IPerson2ModelAdpt() {

				@Override
				public void addToPersonList(IPerson personStub) {
					personList.add(personStub);
				}

				@Override
				public void joinTeam(IChatroom team) {
				}

				@Override
				public void invite(IPerson requesterStub) {
					IChatroom lobby = tm.getLobby();
//					IChatroom team = tm.getTeamByIdx(0);
					
					ThreadPoolUtil.execute(new Runnable(){
						@Override
						public void run() {
							try {
								requesterStub.acceptInvitation(lobby);
								m2svAdpt.append("Lobby sent to client "+ requesterStub.getName() + "!");
//								requesterStub.acceptInvitation(team);
//								m2svAdpt.append("team sent to client "+ requesterStub.getName() + "!");
							} catch (RemoteException e) {
								e.printStackTrace();
							}
						}
					});
					
				}

				

			};
			IPerson localPerson = new Person(p2mAdpt, "StubName");//this is the remote person object
			m2svAdpt.append("Instantiated new local Person: " + localPerson
					+ "\n");
			// Use this technique rather than the simpler "registry.rebind(name, engine);"
			// because it enables us to specify a port number so we can open that port on the firewall
			serverPersonStub = (IPerson) UnicastRemoteObject.exportObject(
					localPerson, IPerson.SERVER_BOUND_PORT);//server object generates its stub
			/*first add person(myself) stub to the personStubList. Then add the stub to the drop list on main view*/

			IMember serverMemberStub;
			try{
				UUID uuid = serverPersonStub.getUUID();
				IMember member = new Member(gameName, uuid, m2mAdpt);
				serverMemberStub = (IMember) UnicastRemoteObject.exportObject(member,
						IPerson.SERVER_BOUND_PORT);
			}catch(Exception e){
				serverMemberStub = null;
				e.printStackTrace();
			}
			localMemberStub = serverMemberStub;
			
			tm.add2Lobby(localMemberStub);
			
			tm.add2Teams(localMemberStub);
			
			m2svAdpt.append("Looking for registry..." + "\n");

			registry = rmiUtils.getLocalRegistry();

			m2svAdpt.append("Found registry: " + registry + "\n");
			
			registry.rebind(IPerson.SERVER_BOUND_NAME, serverPersonStub);
			
			m2svAdpt.append("Local person as rmi server side bound to "
					+ IPerson.SERVER_BOUND_NAME + "\n");
		} catch (Exception e) {
			System.err.println("Person as rmi server exception:" + "\n");
			e.printStackTrace();
			System.exit(-1);
		}
		
		/**
		 * Default command is used to handle unknown message.
		 */
		algo = new DataPacketAlgo<ADataPacket, Void>(new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = -6235847715608181089L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		
		
		setAllKnownChatRoomCmd();
		setGameCmd();
	}
	
	/**
	 * When server receives chatroom message, theoretically it can act as
	 * no-ops for chatroom messages.
	 * But there should be the corresponding commands.
	 */
	public void setAllKnownChatRoomCmd(){
		algo.setCmd(IJoinRoomMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 6019993126378546621L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					host.getSender().recvMessage(new DataPacket<IAroundWorld>(IAroundWorld.class, localMemberStub, new GameFac(localMemberStub)));
					System.out.print("Receive IJoinRoomMsg! \n");
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
					m2svAdpt.append(host.getSender().getName() + " has just joined in! \n");
					
				}catch(Exception e){
					e.printStackTrace();
					FailMsgFactory fac = new FailMsgFactory(host.getSender(), "Failed to join a chatroom!");
					result = fac.makeMsg();
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(ITextMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 5220987801667316300L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(ISuccessMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 6679721827601464210L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				try {
					m2svAdpt.append(host.getSender().getName() + " successfully send a msg!");
				} catch (RemoteException e) {
					e.printStackTrace();
				}
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(IFailMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = -611490398936825985L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
					m2svAdpt.append(host.getSender().getName() + " fail to send a message! \n");
				}catch(Exception e){
					FailMsgFactory fac = new FailMsgFactory(host.getSender(), "Failed to join a chatroom!");
					result = fac.makeMsg();
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(IRequestCmd.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 6053104921341744640L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result = new DataPacket<IAddCmd>(IAddCmd.class, localMemberStub, addCmd);
				
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(IAddCmd.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 8500824904040171857L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
	}
	
	public void setGameCmd(){
	}
}
