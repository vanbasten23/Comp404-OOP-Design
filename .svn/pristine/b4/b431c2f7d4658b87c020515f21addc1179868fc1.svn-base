package xw32_wb7.server.model;

import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import provided.datapacket.ADataPacket;
import provided.datapacket.ADataPacketAlgoCmd;
import provided.datapacket.DataPacket;
import provided.datapacket.DataPacketAlgo;
import provided.mixedData.MixedDataKey;
import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;
import provided.util.IVoidLambda;
import xw32_wb7.chatroom.cmd.GameCmd;
import xw32_wb7.chatroom.cmd.GameOverCmd;
import xw32_wb7.chatroom.cmd.UpdateTeamCmd;
import xw32_wb7.chatroom.model.IMember2ModelAdpt;
import xw32_wb7.chatroom.model.Member;
import xw32_wb7.chatroom.model.Team;
import xw32_wb7.client.model.IPerson2ModelAdpt;
import xw32_wb7.client.model.Person;
import xw32_wb7.game.controller.GameFac;
import xw32_wb7.game.model.GameModel;
import xw32_wb7.game.model.MoveMsg;
import xw32_wb7.game.model.UpdateTeamMsg;
import xw32_wb7.game.msg.IAroundWorld;
import xw32_wb7.game.msg.IGameOverMsg;
import xw32_wb7.game.msg.ILocalGameOverMsg;
import xw32_wb7.game.msg.IMoveMsg;
import xw32_wb7.game.msg.IUpdateTeamMsg;
import xw32_wb7.messagefactory.FailMsgFactory;
import xw32_wb7.util.ThreadPoolUtil;
import common.IAddCmd;
import common.IChatroom;
import common.ICmd2ModelAdapter;
import common.IFailMsg;
import common.IJoinRoomMsg;
import common.ILeaveRoomMsg;
import common.IMember;
import common.IPerson;
import common.IRejectMsg;
import common.IRequestCmd;
import common.ISuccessMsg;
import common.ITextMsg;

public class ServerModel {

	/**
	 * Person to model adapter
	 */
	private IPerson2ModelAdpt p2mAdpt;
	/**
	 * Server model to view adapter
	 */
	private IServerModel2ViewAdpt sm2vAdpt;
	/**
	 * Member to model adapter
	 */
	private IMember2ModelAdpt m2mAdpt;
	
	private Registry registry;
	
	private MixedDataKey<GameModel> modelKey;
	
	/**
	 * TeamManager object, used to manage teams
	 */
	private TeamManager tm;
	
	/**
	 * GameManager object, used to calculate score
	 */
	private GameManager gm;
	
	private boolean teamCreated = false;
	
	/**
	 * The name of the game
	 */
	private String gameName = "Around the world in 80 days";
	
	/**
	 * Stub from local person
	 */
	private IPerson serverPersonStub;
	/**
	 * output command used to put multiple strings up onto the view.
	 */
	private IVoidLambda<String> outputCmd = new IVoidLambda<String>() {

		@Override
		public void apply(String... params) {
			for (String s : params) {
				sm2vAdpt.append(s + "\n");
			}
		}
	};
	
	/**
	 * The default command is used to handle unknown host.
	 * Cause all known host will be handled via Id and by other commands.
	 */
	private DataPacketAlgo<ADataPacket, Void> algo;
	
	/**
	 * A list of IPerson object
	 */
	private List<IPerson> personList;
	
	/**
	 * Factory for the Registry and other uses.
	 */
	private IRMIUtils rmiUtils = new RMIUtils(outputCmd);
	
	/**
	 * Local member stub
	 */
	private IMember localMemberStub;
	
	private IAddCmd addCmd;
	
	private IUpdateTeamMsg updateScoreMsg;
	
	private UUID gameModelUUID;
	
	/**
	 * Game controller factory, used to create a game MVC for client
	 */
	private GameFac gf;
	
	private int playerNum = 0;
	
	private int finishNum = 0;
	

	public ServerModel(IServerModel2ViewAdpt adapter){
		sm2vAdpt = adapter;
		
		personList = new ArrayList<IPerson>();
		
		tm = new TeamManager();
		
		gm = new GameManager();
		
		gameModelUUID = UUID.randomUUID();
		
		modelKey = new MixedDataKey<GameModel>(gameModelUUID, "Game model", GameModel.class);


		m2mAdpt = new IMember2ModelAdpt(){
			@Override
			public ADataPacket handleMessage(ADataPacket msg) {
				return msg.execute(algo, null, null);
			}
			
		};
		
	}
	/**
	 * Start RMI server
	 */
	public void start(){
		
		rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
		//local person as the rmi client
		try {
			sm2vAdpt.setRemoteHost(rmiUtils.getLocalAddress()); //Is this stored somewhere?
			
			p2mAdpt = new IPerson2ModelAdpt() {

				@Override
				public void addToPersonList(IPerson personStub) {
					personList.add(personStub);
					sm2vAdpt.addToPersonDropList(personStub);
					
				}

				@Override
				public void joinTeam(IChatroom team) {
					
				}

				@Override
				public void invite(IPerson requesterStub) {
					IChatroom lobby = tm.getLobby();
					
					ThreadPoolUtil.execute(new Runnable(){
						@Override
						public void run() {
							try {
								requesterStub.acceptInvitation(lobby);
								sm2vAdpt.append("Lobby sent to client "+ requesterStub.getName() + "!");
							} catch (RemoteException e) {
								e.printStackTrace();
							}
						}
					});
					
				}

			};
			IPerson localPerson = new Person(p2mAdpt, gameName);//this is the remote person object
			sm2vAdpt.append("Instantiated new local Person: " + localPerson
					+ "\n");
			// Use this technique rather than the simpler "registry.rebind(name, engine);"
			// because it enables us to specify a port number so we can open that port on the firewall
			serverPersonStub = (IPerson) UnicastRemoteObject.exportObject(
					localPerson, IPerson.SERVER_BOUND_PORT);//server object generates its stub
			/*first add person(myself) stub to the personStubList. Then add the stub to the drop list on main view*/

			IMember serverMemberStub;
			try{
				UUID uuid = serverPersonStub.getUUID();
				IMember member = new Member(gameName, uuid, m2mAdpt);
				serverMemberStub = (IMember) UnicastRemoteObject.exportObject(member,
						IPerson.SERVER_BOUND_PORT);
			}catch(Exception e){
				serverMemberStub = null;
				e.printStackTrace();
			}
			localMemberStub = serverMemberStub;
			
			tm.add2Lobby(localMemberStub);
			
			sm2vAdpt.append("Looking for registry..." + "\n");

			registry = rmiUtils.getLocalRegistry();

			sm2vAdpt.append("Found registry: " + registry + "\n");
			
			registry.rebind(IPerson.SERVER_BOUND_NAME, serverPersonStub);
			
			sm2vAdpt.append("Local person as rmi server side bound to "
					+ IPerson.SERVER_BOUND_NAME + "\n");
		} catch (Exception e) {
			System.err.println("Person as rmi server exception:" + "\n");
			e.printStackTrace();
			System.exit(-1);
		}
		
		/**
		 * Default command is used to handle unknown message.
		 */
		algo = new DataPacketAlgo<ADataPacket, Void>(new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = -6235847715608181089L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				return new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		
		
		setAllKnownChatRoomCmd();
		setGameCmd();
	}
	
	/**
	 * When server receives chatroom message, theoretically it can act as
	 * no-ops for chatroom messages.
	 * But there should be the corresponding commands.
	 */
	public void setAllKnownChatRoomCmd(){
		algo.setCmd(IJoinRoomMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 6019993126378546621L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					tm.getLobby().addMember(host.getSender());
					playerNum ++;
					if(teamCreated){
						sm2vAdpt.getSelectedChatroom().addMember(host.getSender());
					}
					
					System.out.print("Receive IJoinRoomMsg! \n");
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
					sm2vAdpt.append(host.getSender().getName() + " has just joined in! \n");
					
				}catch(Exception e){
					e.printStackTrace();
					FailMsgFactory fac = new FailMsgFactory(host.getSender(), "Failed to join a chatroom!");
					result = fac.makeMsg();
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(ITextMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 5220987801667316300L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				System.out.println(host.getData());
				ADataPacket result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(ISuccessMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 6679721827601464210L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try {
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
					sm2vAdpt.append(host.getSender().getName() + " successfully send a msg!");
				} catch (RemoteException e) {
					result = new DataPacket<IFailMsg>(IFailMsg.class, localMemberStub, null);
					e.printStackTrace();
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(IFailMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = -611490398936825985L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
					sm2vAdpt.append(host.getSender().getName() + " fail to send a message! \n");
				}catch(Exception e){
					FailMsgFactory fac = new FailMsgFactory(host.getSender(), "Failed to join a chatroom!");
					result = fac.makeMsg();
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(IRequestCmd.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 6053104921341744640L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				
				ADataPacket result;
				if(((IRequestCmd)host.getData()).getID().equals(IAroundWorld.class)){
					addCmd = new GameCmd(modelKey, localMemberStub);
					result = new DataPacket<IAddCmd>(IAddCmd.class, localMemberStub, addCmd);
					
				}else if(((IRequestCmd)host.getData()).getID().equals(IGameOverMsg.class)){
					addCmd = new GameOverCmd(modelKey,gm.getWinningTeam(), gm.getWinningScore(), localMemberStub);
					result = new DataPacket<IAddCmd>(IAddCmd.class, localMemberStub, addCmd);
					
				}else if(((IRequestCmd)host.getData()).getID().equals(IUpdateTeamMsg.class)){
					addCmd = new UpdateTeamCmd(modelKey, localMemberStub);
					result = new DataPacket<IAddCmd>(IAddCmd.class, localMemberStub, addCmd);
				}else{
					result = new DataPacket<IRejectMsg>(IRejectMsg.class, localMemberStub, null);

				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(IAddCmd.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 8500824904040171857L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub,null);
				}catch(Exception e){
					result = new DataPacket<IFailMsg>(IFailMsg.class, localMemberStub, null);
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(IRejectMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = -894001215251464884L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub,null);
				}catch(Exception e){
					result = new DataPacket<IFailMsg>(IFailMsg.class, localMemberStub, null);
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(ILeaveRoomMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 5182486767749848282L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					
					
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub,null);
				}catch(Exception e){
					result = new DataPacket<IFailMsg>(IFailMsg.class, localMemberStub, null);
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
	}
	
	/**
	 * Set all commands that interact with game
	 */
	public void setGameCmd(){
		algo.setCmd(IMoveMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 5182486767749848282L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					String c = ((MoveMsg)host.getData()).getCurCity();
					String teamName = "";
					System.out.print("Current city is: " + c);
					IChatroom senderTeam = null;
					for(IChatroom room: tm.getTeams()){
						if(((Team) room).isInTeam(host.getSender())){
							System.out.println("The sender is in team " + room.getName());
							teamName = room.getName();
							senderTeam = room;
							break;
						}
					}
					MoveMsg mMsg = (MoveMsg)host.getData();
					int price = mMsg.getPrice();
					int time = mMsg.getTime();
					
					double lat = mMsg.getLatitude();
					double longt = mMsg.getLongtitude();
					
					
					gm.addScore2Team(teamName, price, time);
					updateScoreMsg = new UpdateTeamMsg(gm.getCurScore(teamName), lat, longt);
					result = new DataPacket<IUpdateTeamMsg>(IUpdateTeamMsg.class, localMemberStub, updateScoreMsg);

					
					IMember sender = host.getSender();
					
					sender.recvMessage(result);
					
					if(senderTeam != null){
						senderTeam.broadcastMsg(result);
					}
				
				}catch(Exception e){
					result = new DataPacket<IFailMsg>(IFailMsg.class, localMemberStub, null);
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
		
		algo.setCmd(IGameOverMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 1642633463726399272L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					sm2vAdpt.append(gm.getWinningTeam() + " has won the game!");
					System.out.println("Server has received gameover msg!");
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
				}catch(Exception e){
					result = new DataPacket<IFailMsg>(IFailMsg.class, localMemberStub, null);
				}
				
				return result;
			
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}});
		
		algo.setCmd(ILocalGameOverMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 1642633463726399272L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					finishNum ++;
					if(playerNum == 2 * finishNum){
						result = new DataPacket<IGameOverMsg>(IGameOverMsg.class, localMemberStub, null);
						tm.getLobby().broadcastMsg(result);
					}else{
						result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
					}
				}catch(Exception e){
					result = new DataPacket<IFailMsg>(IFailMsg.class, localMemberStub, null);
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}});
		
		algo.setCmd(IUpdateTeamMsg.class, new ADataPacketAlgoCmd<ADataPacket, Object, Void>(){

			/**
			 * 
			 */
			private static final long serialVersionUID = 3164671300651974586L;

			@Override
			public ADataPacket apply(Class<?> index, DataPacket<Object> host,
					Void... params) {
				ADataPacket result;
				try{
					System.out.println("Server received update message! ");
					result = new DataPacket<ISuccessMsg>(ISuccessMsg.class, localMemberStub, null);
				}catch(Exception e){
					result = new DataPacket<IFailMsg>(IFailMsg.class, localMemberStub, null);
				}
				return result;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
				
			}
			
		});
	}
	
	public GameFac getGameFac(){
		return gf;
	}
	
	/**
	 * Given a team name from the server GUI, create a team.
	 * @param teamName The name of the team.
	 */
	public IChatroom createTeam(String teamName) {
		gm.addTeam(teamName);
		return tm.createTeam(teamName, localMemberStub);
	}
	
	/**
	 * Given a team and a person, assign this person to this team.
	 * @param team The team.
	 * @param personStub The person.
	 */
	public void assignTeam(IChatroom team, IPerson personStub) {
		ThreadPoolUtil.execute(new Runnable() {
			@Override
			public void run() {
				try {
					personStub.acceptInvitation(team);
				} catch (RemoteException e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	/**
	 * Check if the person is already in the personStub list. If true, don't accept that person.
	 */
	public boolean personExist(IPerson personStub) {
		Iterator<IPerson> it = personList.iterator();
		while (it.hasNext()) {
			try {
				if(personStub.getUUID().compareTo(it.next().getUUID()) == 0) 
					return true;
			} catch (RemoteException e) {
				e.printStackTrace();
			}
		}
		return false;
	}
	
	/**
	 * Notify all IMember in the lobby to start the game, send them all the game.
	 */
	public void startGame(){
		for(IMember m: tm.getLobby().getMembers()){
			gf = new GameFac(localMemberStub);
			ThreadPoolUtil.execute(new Runnable(){
				@Override
				public void run() {
					try {						
						m.recvMessage(new DataPacket<IAroundWorld>(IAroundWorld.class, localMemberStub, gf));
					} catch (RemoteException e) {
						e.printStackTrace();
					}
				}			
			});
		}
	}
	
	public void setTeamCreated(boolean created){
		teamCreated = created;
	}
}
